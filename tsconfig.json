{
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  },
  // Указывает какие файлы будут компилироваться и где необходимо делать
  // проверку типов
  "include": ["./src/**/*", "./*.ts", "config/webpack/webpack.config.ts"],
  // Исключает проверку в переданных каталогах
  "exclude": ["node_modules"],

  // Опции для компилятора
  "compilerOptions": {
    // Каталог выходных файлов
    "outDir": "./dist",

    // Вид модульной системы проекта
    "module": "ESNext",

    // В какой стандарт компилируется код
    "target": "ES5",

    // Какие дефолтные библиотеки (которые приезжают вместе с TS)
    // нужно подключать
    "lib": ["DOM", "DOM.Iterable", "ESNext"],

    // Способ комплиляции JSX в обычный  JS. В основном используется react-jsx,
    // это также позволяет не импортировать реакт в каждый компонент
    "jsx": "react-jsx",

    // Разрешает использование декораторов
    "experimentalDecorators": true,

    // Генерация мапа для скомпиленных файлов
    "sourceMap": true,

    // Разрешает импортить наш код в JSON файлы
    "resolveJsonModule": true,

    // Позволяет более точно переводить новые стандарты в
    // старые форматы ECMAScript (в частности итерационный цикл for...of,
    // спред и рест)
    "downlevelIteration": true,

    // Разрешает создавать файлы с расширением js
    "allowJs": true,

    // Включает строгий режим
    "strict": true,

    // Строгий режим автоматически включает следующие правила:
    // "alwaysStrict": true,
    // "noImplicitAny": true,
    // "noImplicitThis": true,
    // "strictBindCallApply": true,
    // "strictFunctionTypes": true,
    // "strictNullChecks": true,
    // "strictPropertyInitialization": true,
    // "useUnknownInCatchVariables": true,

    // Выдает ошибки при обнаружении неиспользуемых переменных
    "noUnusedLocals": true,

    // Выдает ошибки при обнаружении неиспользуемых параметров функции,
    // также можно добавить параметру нижнее подчеркивание (_a), если
    // данный параметр неиспользуется
    "noUnusedParameters": true,

    // Смотрит, чтобы в конструкции switch/case были прописаны либо
    // return, либо break
    "noFallthroughCasesInSwitch": true,

    // Проверяет, указали ли мы ключевое слово override в случае, если
    // у наследника класса мы меняем метод родителя
    "noImplicitOverride": true,

    // Со значением false запрещаем писать код после ключевого слово return
    // (запрещаем неиспользуемый код)
    "allowUnreachableCode": false,

    // в 99% используется со значением node
    "moduleResolution": "node",

    // Разрешает использование дефолтных импортов там, где предусмотрен только require
    "esModuleInterop": true,

    // Разрешает использование дефолтных импортов
    "allowSyntheticDefaultImports": true,

    // Точка отсчета для абсолютных импортов
    "baseUrl": ".",

    // Большая прибавка по перфомансу при компиляции,
    // каждый файл компилируется в независимости от всего проекта
    "isolatedModules": true,

    // Настройка для нейминга файлов в регистрозависимых и нерегистрозависимых
    // операционных системах. К примеру, для макОС и Виндовс файлы Module.ts и module.ts -
    // являются одинаковыми файлами. Со значением true нельзя будет в разные части проекта импортить
    // один и тот же файл, но с разным его написанием
    "forceConsistentCasingInFileNames": true,

    // В значении true запрещает компилятору залезать в декларации типов подключаемых
    // библиотек в node_modules, чтобы избежать ни о чем не говорящих ошибок при разработке
    "skipLibCheck": true,

    // Алиасы для абсолютных импортов
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
